(function (modules) {
  // 14. 定义 webpackJsonpCallback实现： 合并模块定义 改变promise状态执行后续行为
  function webpackJsonpCallback(data) {
    // 01 获取需要被动态加载的模块 id
    let chunkIds = data[0]
    //02 获取需要被动态加载的模块依赖关系对象
    let moreModules = data[1]
    let chunkId, resolves = []
    // 03 循环判断 chunkIds里对象的模块内容是否已经 完成了加载
    for (let i = 0; i < chunkIds.length; i++) {
      chunkId = chunkIds[i]
      if (Object.prototype.hasOwnProperty.call(inStalledChunks, chunkId) && !!inStalledChunks[chunkId]) {
        resolves.push(inStalledChunks[chunkId][0])
      }
      //更新当前的chunk状态
      inStalledChunks[chunkId] = 0
    }

    for (moduleId in moreModules) {
      if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
        modules[moduleId] = moreModules[moduleId]
      }
    }

    while(resolves.length) {
      resolves.shift()()
    }
  }

  // 15 定义inStalledChunks对于用于标识某个 chunkId对应的chunk是否完成加载
  let inStalledChunks = {
    main: 0
  }

  // 01 定义对象 用于将来缓存被加载过的模块
  let installModules = {}
  // 02 定义一个 __webpack_require__ 方法来替换import require加载操作
  function  __webpack_require__(moduleId) {
    // 2-1 判断缓存中是否存在
    if (installModules[moduleId]) {
      return installModules[moduleId].exports
    }
    // 2-2 缓存中 不存在
    let module = installModules[moduleId] = {
      i: moduleId,
      i: false,
      exports:  {}
    }

    // 2-3 调用当前moduleId对象的函数
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)

    // 2-4 当上述的方法完成后 修改 r的值， 用于表示当前模块内容已经加载完成了
    module.l = true

    // 2-5 将拿回来的内容返回至调用的位置
    return module.exports
  }
  // 03 定义 m 属性用于保存modules
  __webpack_require__.m = modules

  // 04 定义 c 属性用于保存cache
  __webpack_require__.c = installModules

  // 05 定义 o 方法用于判断对象的身上是否存在指定属性
  __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty(object, property)
  }

  // 06 定义 d 方法用于在对象的身上添加指定的属性，同时给该属性提供一个getter
  __webpack_require__.d = function (exports, name, getter) {
    if (!__webpack_require__.o(exports, name)) {
      Object.defineProperty(exports, name, { enumerable: true, get: getter })
    }
  }

  // 定义 r 方法用于标识当前模块是es6 类型
  __webpack_require__.r= function (exports) {
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag ) {
      Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' })
    }
    Object.defineProperty(exports, '_esModule', { value: true })
  }

  // 08 定义 n 方法， 用于设置具体的 getter
  __webpack_require__.n = function (module) {
    let getter = module && module._esModule ?
      function getDefault() { return module['default'] } :
      function getModuleExports() { return module }

      __webpack_require__.d(getter, 'a', getter)
      return getter
  }
  //17 jsonpScriptSrc
  function jsonpScriptSrc (chunkId) {
    return __webpack_require__.p + "" + chunkId + '.built.js'
  }

  // 16 定义 e 方法用于实现： 实现json来加载内容，利用promise来实现异步加载操作
  __webpack_require__.e = function (chunkId) {
    //01 定义一个数组用于存放promise
    let promises = []
    // 02 获取chunkId对应的chunk是否已经完成加载
    let installedChunkData = inStalledChunks[chunkId]

    //03 依据当前是否已经完成加载的状态来执行后续的逻辑
    if (inStalledChunks !== 0 ) {
      if (!!installedChunkData) {
        promises.push(installedChunkData[2])
      } else {
        let promise = new Promise((resolve, reject) => {
          installedChunkData = inStalledChunks[chunkId] = [resolve, reject]
        })

        promises.push(installedChunkData[2] = promise)

        // 创建标签
        let script = document.createElement('script')
        script.src = jsonpScriptSrc(chunkId)
        document.head.appendChild(script)
      }
    }

    return Promise.all(promises)

  }

  // 11 定义t 方法 用于加载指定value的模块内容 之后对内容进行处理再返回
  __webpack_require__.t = function (value, mode) {
    if (mode & 1) {
      value = __webpack_require__(value)
    }

    if (mode & 8) {
      return value
    }

    if ((mode & 4) && typeof value === 'object' && value && value._esModule) {
      return value
    }

    let ns = Object.create(null)

    __webpack_require__.r(ns)

    Object.defineProperty(ns, 'default', { enumerable: true, value: value } )

    if (mode && 2 && typeof value !== 'string') {
      for (var key in value) {
        __webpack_require__.d(ns, key, function (key) {
          return value[key]
        }.bind(null, key))
      }
    }
    return ns
  }

  // 09 定义 p 属性 用于保存资源访问路径
  __webpack_require__.p = ""

  // 11 定义 变量存放数组
  var jsonpArray = window['webpackJsonp'] = window['webpackJsonp'] || []

  // 12 保存原生的push方法
  let oldJsonpFunction = jsonpArray.push.bind(jsonpArray)

  // 13 重写push
  jsonpArray.push = webpackJsonpCallback



  // 10 调用__webpack_require__方法
  return __webpack_require__(__webpack_require__.s = '<%-entryModuleId%>')


})
({
  <%for(let module of modules) {%>
    "<%-module.moduleId%>":
    (function(module, exports, __webpack_require__) {
      <%-module._source%>
    }),
  <%}%>
})