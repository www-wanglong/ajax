function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";
import { Slide, Fade } from "@chakra-ui/transition";
import { Modal, ModalContent, ModalOverlay } from "@chakra-ui/modal";
import { forwardRef } from "@chakra-ui/system";
import { __DEV__ } from "@chakra-ui/utils";
var TransitionContext = /*#__PURE__*/React.createContext({
  content: {},
  overlay: {}
});

if (__DEV__) {
  TransitionContext.displayName = "TransitionContext";
}

var useTransitionContext = () => React.useContext(TransitionContext);

function DrawerTransition(props) {
  var {
    in: inProp,
    children,
    placement
  } = props;
  return /*#__PURE__*/React.createElement(Slide, {
    in: inProp,
    placement: placement
  }, contentStyle => /*#__PURE__*/React.createElement(Fade, {
    in: inProp
  }, overlayStyle => children({
    content: contentStyle,
    overlay: overlayStyle
  })));
}

if (__DEV__) {
  DrawerTransition.displayName = "DrawerTransition";
}

export function Drawer(props) {
  var {
    isOpen,
    onClose,
    placement = "right",
    children
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["isOpen", "onClose", "placement", "children"]);

  return /*#__PURE__*/React.createElement(DrawerTransition, {
    in: isOpen,
    placement: placement
  }, styles => /*#__PURE__*/React.createElement(TransitionContext.Provider, {
    value: styles
  }, /*#__PURE__*/React.createElement(Modal, _extends({
    isOpen: true,
    onClose: onClose
  }, rest), children)));
}

if (__DEV__) {
  Drawer.displayName = "Drawer";
}

export var DrawerContent = /*#__PURE__*/forwardRef(function DrawerContent(props, ref) {
  var {
    content: styles
  } = useTransitionContext();
  return /*#__PURE__*/React.createElement(ModalContent, _extends({
    ref: ref,
    position: "fixed",
    style: styles,
    marginTop: "0",
    marginBottom: "0",
    borderRadius: "0"
  }, props));
});

if (__DEV__) {
  DrawerContent.displayName = "DrawerContent";
}

export var DrawerOverlay = /*#__PURE__*/forwardRef(function DrawerOverlay(props, ref) {
  var {
    overlay: styles
  } = useTransitionContext();
  return /*#__PURE__*/React.createElement(ModalOverlay, _extends({
    style: styles,
    transition: "all 0.2s",
    ref: ref
  }, props));
});

if (__DEV__) {
  DrawerOverlay.displayName = "DrawerOverlay";
}

export { ModalBody as DrawerBody, ModalHeader as DrawerHeader, ModalFooter as DrawerFooter, ModalCloseButton as DrawerCloseButton } from "@chakra-ui/modal";
//# sourceMappingURL=drawer.js.map