function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { chakra } from "@chakra-ui/system";
import { Transition } from "@chakra-ui/transition";
import { ariaAttr, cx, mergeRefs, __DEV__ } from "@chakra-ui/utils";
import { useRect } from "@reach/rect";
import * as React from "react";
export var Collapse = /*#__PURE__*/React.forwardRef(function Collapse(props, forwardedRef) {
  var _rect$height;

  var {
    isOpen,
    children,
    config,
    startingHeight = 0,
    animateOpacity = true,
    className,
    style: htmlStyle,
    timeout = 150,
    easing = "ease"
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["isOpen", "children", "config", "startingHeight", "animateOpacity", "className", "style", "timeout", "easing"]);

  var getStr = property => property + " " + timeout + "ms " + easing;

  var transition = getStr("height") + ", " + getStr("opacity") + ", " + getStr("transform");
  var [hidden, setHidden] = React.useState(true);
  var child = children;

  if (typeof children === "string") {
    child = /*#__PURE__*/React.createElement("div", null, children);
  }

  var _child = React.Children.only(child);

  var ref = React.useRef(null);
  var rect = useRect(ref, true);
  var height = (_rect$height = rect == null ? void 0 : rect.height) != null ? _rect$height : 0;
  var styles = {
    init: {
      height: startingHeight,
      opacity: startingHeight ? 1 : 0
    },
    entered: {
      height,
      opacity: 1,
      transform: "translateY(0)"
    },
    exiting: {
      height: startingHeight,
      opacity: startingHeight ? 1 : 0,
      transform: startingHeight > 0 ? "translateY(0)" : "translateY(-0.5rem)"
    }
  };
  return /*#__PURE__*/React.createElement(Transition, {
    in: isOpen,
    styles: config || styles,
    onEntered: () => setHidden(false),
    onExited: () => setHidden(true),
    timeout: {
      enter: 0,
      exit: timeout
    },
    transition: transition,
    unmountOnExit: false
  }, styles => /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: forwardedRef,
    className: cx("chakra-collapse", className),
    "aria-hidden": ariaAttr(hidden)
  }, rest, {
    style: _extends({}, styles, {
      overflow: "hidden",
      opacity: animateOpacity ? styles.opacity : 1,
      willChange: "height, opacity, transform"
    }, htmlStyle)
  }), /*#__PURE__*/React.cloneElement(_child, {
    ref: mergeRefs(ref, _child.props.ref)
  })));
});

if (__DEV__) {
  Collapse.displayName = "Collapse";
}
//# sourceMappingURL=collapse.js.map